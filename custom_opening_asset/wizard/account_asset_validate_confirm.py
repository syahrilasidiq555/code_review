from odoo import models, fields, api, _
from odoo.exceptions import UserError


class AccountAssetValidateConfirm(models.TransientModel):
    _name = 'account.asset.validate.confirm'
    _description = 'Account Asset Validate Confirm'

    @api.depends('account_id', 'opening_balance', 'calculated_balance')
    def _compute_fields(self):
        for record in self:
            record.title = _(f"""Opening balance amount of account:\n{record.account_id.display_name}\ndoesn't match with calculated opening balance amount generated by Odoo!""")
            record.difference_balance = record.opening_balance - record.calculated_balance

    @api.depends('asset_model')
    def _default_account_counter_id(self):
        return self.asset_model.account_depreciation_expense_id.id

    title = fields.Text(string='Title', compute=_compute_fields)
    currency_id = fields.Many2one('res.currency', string='Currency', default=lambda self: self.env.company.currency_id)

    opening_balance = fields.Monetary(string='Opening Balance', currency_field='currency_id', readonly=True, required=True)
    calculated_balance = fields.Monetary(string='Calculated Balance', currency_field='currency_id', readonly=True, required=True)
    difference_balance = fields.Monetary(string='Difference Balance', currency_field='currency_id', readonly=True, compute=_compute_fields)

    move_ids = fields.Many2many('account.move', string='Journal Entries', domain="[('move_type', '=', 'entry')]")
    correction_ids = fields.Many2many('account.asset.correction', string='Corrections')

    asset_model = fields.Many2one('account.asset', string='Asset Model', required=True, readonly=1)

    actions = fields.Selection(
        selection=[
            ('account.asset.correction', 'Create Asset Correction'),
            ('account.move', 'Create Regular Journal Entry'),
            ('edit_auto', 'Auto Edit Opening Balance'),
            ('ignore', 'Ignore and Run (Not recommended)')
        ],
        string='Action',
        default='account.asset.correction',
        required=True
    )

    name = fields.Char(string='Label', default=_('Asset Correction'))
    date = fields.Date(string='Date')

    account_id = fields.Many2one('account.account', string='Account Difference', related='asset_model.account_depreciation_id')
    account_counter_id = fields.Many2one('account.account', string='Account Counter', default=_default_account_counter_id)
    journal_id = fields.Many2one('account.journal', string='Journal', related='asset_model.journal_id')

    is_create_entries = fields.Boolean(string='Create Entries')
    is_correct_asset = fields.Boolean(string='Correct Asset')
    is_correct_depreciation = fields.Boolean(string='Correct Depreciation')
    is_correct_book = fields.Boolean(string='Correct Book Value')

    book_value = fields.Monetary(string='Book Value', currency_field='currency_id')
    warning_msg = fields.Text(default='Selecting this action will cause your asset report will have different value from other report!', readonly=True)

    @api.onchange('actions')
    def _onchange_actions(self):
        self.name = self.actions == 'edit_auto' and _('Opening balance') or _('Asset Correction')

    def action_open_model(self, move_id):
        return {
            'name': move_id.ref,
            'type': 'ir.actions.act_window',
            'res_model': 'account.asset.correction' if self.actions == 'account.asset.correction' else 'account.move',
            'view_mode': 'form',
            'view_type': 'form',
            'res_id': move_id.id,
            'target': 'current'
        }

    def _prepare_move_lines(self, parent_id):
        line_ids = [
            (0, 0, {
                'name': self.name,
                'date': self.date,
                'account_id': self.account_id.id,
                'debit': -self.difference_balance if self.difference_balance < 0.0 else 0.0,
                'credit': 0.0 if self.difference_balance < 0.0 else self.difference_balance,
                'move_id': parent_id.id
            }),
            (0, 0, {
                'name': self.name,
                'date': self.date,
                'account_id': self.account_counter_id.id,
                'debit': 0.0 if self.difference_balance < 0.0 else self.difference_balance,
                'credit': -self.difference_balance if self.difference_balance < 0.0 else 0.0,
                'move_id': parent_id.id
            })
        ]

        return line_ids

    def _get_debit_credit(self, i, debit, credit):
        if i == 0:
            value = {'credit': credit + self.difference_balance}
        else:
            if debit and not credit:
                value = {'debit': debit + self.difference_balance}
            else:
                value = {'credit': credit - self.difference_balance}
        return value

    def _get_active_ids(self):
        active_model = self.env.context.get('active_model') or self.env.context.get('params', {}).get('model')
        if active_model != 'account.asset':
            raise UserError(_('No active model detected!'))

        active_ids = self.env.context.get('active_ids')
        if not active_ids:
            active_ids = self.env.context.get('active_id') or self.env.context.get('params', {}).get('id')
            if active_ids:
                active_ids = [active_ids]
            else:
                raise UserError(_('No active ids detected!'))
        return self.env[active_model].browse(active_ids)

    def action_ok(self):
        if self.actions in ['account.asset.correction', 'account.move']:
            move_values = {
                'ref': self.name,
                'date': self.date,
                'journal_id': self.journal_id.id,
            }

            if self.actions == 'account.asset.correction':
                move_values.update({
                    'create_journal_items': self.is_create_entries,
                    'is_correct_asset': self.is_correct_asset,
                    'is_correct_depreciation': self.is_correct_depreciation,
                    'is_correct_book': self.is_correct_book,
                    'asset_model': self.asset_model.id,
                })
                if self.is_correct_book:
                    move_values.update({'book_value': self.book_value})

            move_id = self.env[self.actions].create(move_values)
            line_ids = self._prepare_move_lines(move_id)

        elif self.actions == 'edit_auto':
            move_id = self.env.company.account_opening_move_id

            """
            This is the case of account_id and account_counter_id (or vice versa) 
            if we override opening balance:
            - accounts has no lines in opening balance (means we must create it)
            - accounts has exact 1 line in opening balance (means we must update it's debit/credit amount)
            - accounts has many lines in opening balance (this one will be wrapped into 1 line, then update it's debit/credit amount)

            And here's the case of account_id vs account_counter_id position
            - Since account_id is account of asset depreciation, then it must be credited
            - For account_counter_id:
              > If it has credit amount, and it's credit amount > difference balance
                then it will increase (if difference < 0) or
                decrease (if difference > 0) it's credit amount:
                                    |     debit     |     credit    |
                --------------------|---------------|---------------|
                account_id          |               |  1000 + diff  |
                account_counter_id  |               |  1000 - diff  |
              
              > Otherwise, account_counter_id will be debited:
                                    |     debit     |     credit    |
                --------------------|---------------|---------------|
                account_id          |               |  1000 + diff  |
                account_counter_id  |  1000 + diff  |               |
            """

            default_values = self._prepare_move_lines(move_id)

            line_ids = []
            for i, account_id in enumerate([self.account_id, self.account_counter_id]):
                move_ids = self.env['account.move.line'].search([
                    ('move_id', '=', move_id.id),
                    ('account_id', '=', account_id.id)
                ])
                if len(move_ids) == 0:
                    value = default_values[i]
                    line_ids.append(value)

                elif len(move_ids) == 1:
                    # update it's debit/credit amount after correction
                    value = self._get_debit_credit(i, move_ids[0].debit, move_ids[0].credit)
                    line_ids.append((1, move_ids[0].id, value))

                else:
                    # sum all debit and credit amount of move lines
                    line = {
                        'debit': sum(move_ids.mapped('debit')),
                        'credit': sum(move_ids.mapped('credit'))
                    }

                    # update it's debit/credit amount after correction
                    value = self._get_debit_credit(i, line['debit'], line['credit'])

                    # delete the rest of move lines
                    for move in move_ids[1:]:
                        line_ids.append((2, move.id, False))

                    line_ids.append((1, move_ids[0].id, value))

        else:
            return self.action_run_assets(ignore=True)

        # assign move lines to it's parent
        assets = self._get_active_ids()
        move_id.update({
            'line_ids': line_ids,
            'opening_asset_ids': [
                (4, asset.id)
                for asset in assets
                if asset.first_depreciation_date < self.env.company.account_opening_date
            ]
        })

        move_id.action_post()
        self.action_run_assets()

        # open journal entries or correction entries
        return self.action_open_model(move_id)

    def action_run_assets(self, ignore=False):
        assets = self._get_active_ids()
        assets.filtered(lambda x: x.first_depreciation_date < self.env.company.account_opening_date).update({
            'move_opening_ids': [(4, move.id) for move in self.move_ids],
            'correction_opening_ids': [(4, move.id) for move in self.correction_ids]
        })
        if ignore:
            return assets.with_context(ignore_check=True).validate()
        return assets.validate()
